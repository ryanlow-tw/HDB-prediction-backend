# -*- coding: utf-8 -*-
"""HDB_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kAgzuMs-gQYIKm39LssQNyA9ARkVvYfB

IMPORTS
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
import pickle

"""INIT"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""CSV analysis"""

print("Reading data...")
flats_df = pd.read_csv("resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv")


"""Let's get the flats only in 2021 because if we predict prices,  we don't want outdated data..."""
print("Cleaning data...")
flats_2021_df = flats_df[flats_df['month'].str.split('-', expand=True)[0] == "2021"]

"""Check whether the unique values are not overlapping"""
floor_counts = dict(flats_2021_df['storey_range'].value_counts())

x = sorted(list(floor_counts.keys()))
y = [floor_counts[floor_range] for floor_range in x]


numbers = list(range(len(flats_2021_df)))

quantiles = np.round(np.percentile(numbers, [25, 75])).astype(int)

def get_floor_range_from_quantile(quantile):
  sum = 0
  floor_ranges = sorted(list(floor_counts.keys()))
  for index in range(len(floor_ranges)):
    floor_range = floor_ranges[index]
    count = floor_counts[floor_range]
    sum += count
    if sum > quantile:
      return floor_ranges[index + 1]


floor_quantiles = list(map(get_floor_range_from_quantile, quantiles))

floor_ranges = sorted(list(floor_counts.keys()))

encode_dict = {}
curr_encode = 0
for floor_range in floor_ranges:
  if floor_range in floor_quantiles:
    curr_encode += 1
  encode_dict[floor_range] = curr_encode

flats_storey_encoded_df = flats_2021_df.copy()

flats_storey_encoded_df['storey_range'] = flats_2021_df['storey_range'].apply(lambda x: encode_dict[x])

high_floor_indices = flats_2021_df[flats_2021_df['storey_range'] == "13 TO 15"].index

years_cleaned_df = flats_storey_encoded_df.copy()
years_cleaned_df['remaining_lease'] = years_cleaned_df['remaining_lease'].apply(lambda x: x.split()[0])
years_cleaned_df['remaining_lease'] = years_cleaned_df['remaining_lease'].astype(int)
selected_features_df = years_cleaned_df[['town', 'storey_range','floor_area_sqm', 'remaining_lease']]

X = pd.get_dummies(selected_features_df)
y = years_cleaned_df['resale_price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
print("Training data...")
model = RandomForestRegressor()
model.fit(X=X_train, y=y_train)
with open("model.pkl", "wb") as f:
  pickle.dump(model,f)
print("Training complete!")
print(f"\n\n****Model Features:****\n{selected_features_df.dtypes}")